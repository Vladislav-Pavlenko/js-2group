{"mappings":"YAAO,IAAMA,EAAO,CAClBC,KAAMC,SAASC,cAAc,cAC7BC,KAAMF,SAASC,cAAc,eCFlBE,EACX,mECmBSC,EAAS,WAGlB,I,IAHmBC,EAAIC,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,GACtBE,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWP,IAC3CA,KACLG,GAAML,EAAgC,GAAdM,EAAMJ,IAEhC,OAAOG,C,ECzBF,SAASK,EAAWC,GACzB,IAAMC,EAAW,CAAEP,GAAIJ,KAIvB,OAHA,IAAIY,SAASF,EAAMG,eAAeC,SAAQ,SAACC,EAAOC,GAChDL,EAASK,GAAOD,C,IAEXJ,C,CCNT,IAAMM,EAAM,QAQZ,SAASC,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QAAQL,KAAS,E,CAU3C,ICbCM,EDaKC,EAAkB,CAC7BC,IAlBF,SAAad,GACX,IAAMe,EAAaR,IACnBQ,EAAWC,KAAKhB,GAChBU,aAAaO,QAAQX,EAAKE,KAAKU,UAAUH,G,EAgBzCI,OAAAZ,EACAa,WAVF,SAAoB3B,GAClB,IACM4B,EADaR,EAAgBM,SACJG,QAAO,SAAAC,G,OAAQA,EAAK9B,KAAOA,C,IAE1D,OADAiB,aAAaO,QAAQX,EAAKE,KAAKU,UAAUG,IAClCA,C,GEhBF,SAASG,EAAiBxB,GAC/B,MAAO,sDAEGyB,OADYzB,EAASP,GAAG,4DAE1BgC,OADEzB,EAAS0B,SAAS,mBACFD,OAAlBzB,EAAS2B,SAAS,mB,CCoB5B5C,EAAKC,KAAK4C,iBAAiB,UAAU,SAAA7B,GACnCA,EAAM8B,iBACN,IAAM7B,EAAWF,EAAWC,GAC5Bc,EAAgBC,IAAId,GACpB,IAAMY,EAASY,EAAiBxB,GAChCjB,EAAKI,KAAK2C,mBAAmB,YAAalB,GAC1C7B,EAAKC,KAAK+C,O,IFxBJnB,EADQC,EAAgBM,SACTa,IAAIR,GAAkBS,KAAK,IAChDlD,EAAKI,KAAK2C,mBAAmB,YAAalB,GE4B5C7B,EAAKI,KAAKyC,iBAAiB,SC/BpB,SAAoB7B,GACzB,GAA8B,WAA1BA,EAAMmC,OAAOC,SAAjB,CAGAC,QAAQC,IAAItC,EAAMmC,QAClB,IAAMzC,EAAKM,EAAMmC,OAAOI,QAAQ7C,GAC1B8C,EAAc1B,EAAgBO,WAAW3B,GAC/CV,EAAKI,KAAKqD,UAAYD,EAAYP,IAAIR,GAAkBS,KAAK,GAL3D,C","sources":["src/js/refs.js","node_modules/nanoid/url-alphabet/index.js","node_modules/nanoid/index.browser.js","src/js/create-task.js","src/js/localstorage-api.js","src/js/render-tasks.js","src/js/create-task-markup.js","src/index.js","src/js/delete-task.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('#task-form'),\n  list: document.querySelector('#task-list'),\n};\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { nanoid } from 'nanoid';\nexport function createTask(event) {\n  const formTask = { id: nanoid() };\n  new FormData(event.currentTarget).forEach((value, key) => {\n    formTask[key] = value;\n  });\n  return formTask;\n}\n","const KEY = 'tasks';\n\nfunction add(formTask) {\n  const tasksArray = getAll();\n  tasksArray.push(formTask);\n  localStorage.setItem(KEY, JSON.stringify(tasksArray));\n}\n\nfunction getAll() {\n  return JSON.parse(localStorage.getItem(KEY)) || [];\n}\n\nfunction deleteTask(id) {\n  const tasksArray = localStorageApi.getAll();\n  const updateTasks = tasksArray.filter(item => item.id !== id);\n  localStorage.setItem(KEY, JSON.stringify(updateTasks));\n  return updateTasks;\n}\n\nexport const localStorageApi = {\n  add,\n  getAll,\n  deleteTask,\n};\n","import { createTaskMarkup } from './create-task-markup';\nimport { refs } from './refs';\nimport { localStorageApi } from './localstorage-api';\n\nexport function renderTasks() {\n  const tasks = localStorageApi.getAll();\n  const markup = tasks.map(createTaskMarkup).join('');\n  refs.list.insertAdjacentHTML('beforeend', markup);\n}\n","export function createTaskMarkup(formTask) {\n  return `<li class=\"task-list-item\">\n     <button data-id=\"${formTask.id}\" class=\"task-list-item-btn\">Delete</button>\n      <h3>${formTask.taskName}</h3>\n     <p>${formTask.taskText}</p>\n     </li>`;\n}\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\n\nimport { refs } from './js/refs';\nimport { createTask } from './js/create-task';\nimport { localStorageApi } from './js/localstorage-api';\nimport { createTaskMarkup } from './js/create-task-markup';\nimport { renderTasks } from './js/render-tasks';\nimport { deleteTask } from './js/delete-task';\n\nrefs.form.addEventListener('submit', event => {\n  event.preventDefault();\n  const formTask = createTask(event);\n  localStorageApi.add(formTask);\n  const markup = createTaskMarkup(formTask);\n  refs.list.insertAdjacentHTML('beforeend', markup);\n  refs.form.reset();\n});\n\nrenderTasks();\n\nrefs.list.addEventListener('click', deleteTask);\n","import { createTaskMarkup } from './create-task-markup';\nimport { localStorageApi } from './localstorage-api';\nimport { refs } from './refs';\n\nexport function deleteTask(event) {\n  if (event.target.nodeName !== 'BUTTON') {\n    return;\n  }\n  console.log(event.target);\n  const id = event.target.dataset.id;\n  const tasksUpdate = localStorageApi.deleteTask(id);\n  refs.list.innerHTML = tasksUpdate.map(createTaskMarkup).join('');\n}\n"],"names":["$37e33676934ad046$export$21666b427502ea6d","form","document","querySelector","list","$1e05b56d72c9bb75$export$2b646eea95309f00","$8069ef7e6126e429$export$ac4959f4f1338dfc","size","arguments","length","id","bytes","crypto","getRandomValues","Uint8Array","$5c108b7d15c30abd$export$f7292ab7796be73c","event","formTask","FormData","currentTarget","forEach","value","key","$26197da5308de3c6$var$KEY","$26197da5308de3c6$var$getAll","JSON","parse","localStorage","getItem","markup","$26197da5308de3c6$export$1d9a30f00e78c7c3","add","tasksArray","push","setItem","stringify","getAll","deleteTask","updateTasks","filter","item","$832e79bd089636c5$export$5abcd3dce68fbf9a","concat","taskName","taskText","addEventListener","preventDefault","insertAdjacentHTML","reset","map","join","target","nodeName","console","log","dataset","tasksUpdate","innerHTML"],"version":3,"file":"index.85b5ee73.js.map"}